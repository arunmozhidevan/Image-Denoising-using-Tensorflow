# -*- coding: utf-8 -*-
"""autoencoder for images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Fh0b7mQcM_1O02TBc_kf7mmNnKVEPEU
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras. mnist

(X_train, y_train), (X_test, y_test) = mnist.load_data()

plt.imshow(X_test[0])

X_train = X_train/255 
X_test = X_test/255

from tensorflow.keras.layers import Dense, Flatten, Reshape
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import SGD

X_train.shape

#output dense
28*28

encoder = Sequential()
encoder.add(Flatten(input_shape=[28,28]))
encoder.add(Dense(400,activation='relu'))
encoder.add(Dense(200,activation='relu'))
encoder.add(Dense(100,activation='relu'))
encoder.add(Dense(50,activation='relu'))
encoder.add(Dense(25,activation='relu'))

decoder = Sequential()
decoder.add(Dense(50,input_shape=[25],activation='relu'))
decoder.add(Dense(100,activation='relu'))
decoder.add(Dense(200,activation='relu'))
decoder.add(Dense(400,activation='relu'))
decoder.add(Dense(784,activation='sigmoid'))
decoder.add(Reshape([28,28]))

autoencoder = Sequential([encoder,decoder])
autoencoder.compile(loss='binary_crossentropy',optimizer=SGD(lr=3),metrics=['accuracy'])

autoencoder.fit(X_train,X_train,epochs=20,
                validation_data=(X_test,X_test))

lossess = pd.DataFrame(autoencoder.history.history)

lossess[18:].plot()

lossess

passed_images = autoencoder.predict(X_test[:10])

n=3

print('orginal image')
plt.imshow(X_test[n])
plt.show()
print('reconstucted image')
plt.imshow(passed_images[n])

from tensorflow.keras.layers import GaussianNoise

sample = GaussianNoise(0.2)

noisy = sample(X_test[:10], training=True)

n=3

print('orginal image')
plt.imshow(X_test[n])
plt.show()
print('noisy image')
plt.imshow(noisy[n])

import tensorflow as tf

tf.random.set_seed(101)
np.random.seed(101)

encoder = Sequential()
encoder.add(Flatten(input_shape=[28,28]))
encoder.add(GaussianNoise(0.2))
encoder.add(Dense(400,activation='relu'))
encoder.add(Dense(200,activation='relu'))
encoder.add(Dense(100,activation='relu'))
encoder.add(Dense(50,activation='relu'))
encoder.add(Dense(25,activation='relu'))

decoder = Sequential()
decoder.add(Dense(50,input_shape=[25],activation='relu'))
decoder.add(Dense(100,activation='relu'))
decoder.add(Dense(200,activation='relu'))
decoder.add(Dense(400,activation='relu'))
decoder.add(Dense(784,activation='sigmoid'))
decoder.add(Reshape([28,28]))

noise_remove = Sequential([encoder,decoder])
noise_remove.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

noise_remove.summary()

noise_remove.fit(X_train,X_train,epochs=20,
                validation_data=(X_test,X_test))

denoised = noise_remove(noisy)



n=3
plt.imshow(X_test[n])
plt.title('orginal image')
plt.show()

plt.imshow(noisy[n])
plt.title('noisy image')
plt.show()

plt.imshow(denoised[n])
plt.title('denoised image')

noise_remove.save('image_noise_removal.h5')

